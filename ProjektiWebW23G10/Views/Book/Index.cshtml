@model IEnumerable<ProjektiWebW23G10.Models.BookModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@{
    ViewData["Title"] = "Books";

    Pager pager=new Pager();
    int pageNo = 0;
    if(ViewBag.Pager != null)
    {
        pager=ViewBag.Pager;
        pageNo = pager.CurrentPage;

    }
}

<h1 class="mt-4">Index</h1>

<p>
    @if (User.IsInRole("Admin"))
    {
        <a asp-action="Create">Create New</a>
    }
</p>

@* Search Box *@
<div class="mb-4">
    <div class="search-container">
        <input type="text" id="combinedFilter" class="wide-input" style="color: white; background-color: #3A3F44; border: 1px solid #3A3F44; border-radius: 5px; height: 30px; padding: 10px; margin-bottom: 10px;" placeholder="Search by Title, Author, ISBN or Genre" oninput="filterBooks()" />
    </div>

    @* Filter Button *@
    <button class="btn btn-primary" onclick="showFilterDialog()">
        <i class="fa-solid fa-filter"></i> Filter
    </button>

    @* Sort Button *@
    <div class="btn-group">
        <button class="btn btn-primary dropdown-toggle" type="button" id="sortDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="fas fa-sort-amount-up"></i> Sort
        </button>
        <div class="dropdown-menu" aria-labelledby="sortDropdown">
            <a class="dropdown-item" href="#" onclick="sortBooksByPrice('asc')">Price: Lowest to Highest</a>
            <a class="dropdown-item" href="#" onclick="sortBooksByPrice('desc')">Price: Highest to Lowest</a>
            <a class="dropdown-item" href="#" onclick="sortBooksAlphabetically('asc')">Title: A-Z</a>
            <a class="dropdown-item" href="#" onclick="sortBooksAlphabetically('desc')">Title: Z-A</a>
            <a class="dropdown-item" href="#" onclick="sortBooksByPublicationDate('oldest')">Oldest First</a>
            <a class="dropdown-item" href="#" onclick="sortBooksByPublicationDate('newest')">Newest First</a>
        </div>
    </div>
</div>

<table class="table">
    <thead style="border-radius:5px">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ISBN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PublicationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CoverImage)
            </th>
            @if (User.IsInRole("Admin"))
            {
                <th>
                    Operations
                </th>
            }
            @if (User.IsInRole("User"))
            {
                <th></th>
            }
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Author)
                </td>
                <td>
                    @FormatISBNForDisplay(item.ISBN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PublicationDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @{
                        // Get the currency symbol for the euro (€) using the "fr-FR" culture
                        var currencySymbol = System.Globalization.NumberFormatInfo.CurrentInfo.CurrencySymbol;
                        // Display the price with the currency symbol
                        var formattedPrice = item.Price.HasValue ? $"{currencySymbol} {item.Price.Value:N2}" : "N/A";
                    }
                    @formattedPrice
                </td>
                <td>
                    <img src="~/Images/@item.CoverImage" alt="Cover Image" class="img-thumbnail" width="100" height="100" />
                </td>
                <td>
                    @if (User.IsInRole("Admin"))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit |</a>
                        <a asp-controller="Book" asp-action="Details" asp-route-id="@item.Id">Details |</a>
                        <button type="button" onclick="confirmDelete('@item.Id', '@item.Title')" style="background: none; border: none; padding: 0; color: white; text-decoration: underline; cursor: pointer;">Delete</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="container">
    @if(pager.TotalPages > 0){
            <ul class="pagination justify-content-end">
   @if(pager.CurrentPage > 1)
            {
                <li class="page-item">
                       <a class="page-link" asp-controller="Book" asp-action="Index" asp-route-pg="1">First</a>
                </li>
                 <li class="page-item">
                       <a class="page-link" asp-controller="Book" asp-action="Index" asp-route-pg="@(pager.CurrentPage-1)">Previous</a>
                </li>
            }

            @for(var pge=pager.StartPage; pge <= pager.EndPage; pge++)
            {
                <li class="page-item @(pge == pager.CurrentPage ? "active" :  "")">
                    <a class="page-link" asp-controller="Book" asp-action="Index" asp-route-pg="@pge">@pge</a>
                </li>
            }
            @if(pager.CurrentPage < pager.TotalPages)
            {
                <li class="page-item">
                       <a class="page-link" asp-controller="Book" asp-action="Index" asp-route-pg="@(pager.CurrentPage+1)">Next</a>
                </li>
                 <li class="page-item">
                       <a class="page-link" asp-controller="Book" asp-action="Index" asp-route-pg="@(pager.TotalPages)">Last</a>
                </li>
            }
        </ul>
    }
</div>

<!-- Bootstrap modal for custom confirmation -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="background-color: #32383E;">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="cancelDelete()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="itemDetails">
                <!-- Item details will be displayed here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="cancelDelete()">No</button>
                <form asp-action="Delete" method="post" style="display: inline;">
                    <input type="hidden" id="itemIdToDelete" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="filterModal" tabindex="-1" role="dialog" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filter Options</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="cancelFilter()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Dropdown for Genres -->
                <label for="genreDropdown">Select Genre:</label>
                <select class="form-control" style="color:white; background-color: #3A3F44;" id="genreDropdown">
                    <!-- Genres will be dynamically added here -->
                </select>

                <!-- Dropdown for Authors -->
                <label for="authorDropdown">Select Author:</label>
                <select class="form-control" style="color:white; background-color: #3A3F44;" id="authorDropdown">
                    <!-- Authors will be dynamically added here -->
                </select>

                <!-- Price Range Input -->
                <label for="priceRange">Price Range:</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input type="number" class="form-control" style="color:white; background-color: #3A3F44;" id="minPrice" placeholder="Min" min="0" step="1">
                    <span class="input-group-text">to</span>
                    <input type="number" class="form-control" style="color:white; background-color: #3A3F44;" id="maxPrice" placeholder="Max" min="0" step="1">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="clearFilters()">Clear Filters</button>
                <button type="button" class="btn btn-primary" onclick="applyFilter()">Apply Filter</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Funksioni per me konfirmu delete-in e nje libri
    function confirmDelete(itemId, itemName) {
        // Set the item ID and details in the modal
        document.getElementById('itemIdToDelete').value = itemId;
        document.getElementById('itemDetails').innerHTML = `<p>Title: ${itemName}</p>`;

        // Show the Bootstrap modal
        $('#deleteConfirmationModal').modal('show');
    }

    // Funksioni per me anulu fshirjen e nje libri
    function cancelDelete() {
        // Hide the Bootstrap modal
        $('#deleteConfirmationModal').modal('hide');
    }

    // Funksioni per me kerku libra sipas Titullit, Autorit, ISBN ose Genre
    function filterBooks() {
        // Get the combined filter value
        var combinedFilter = document.getElementById('combinedFilter').value.toLowerCase();

        // Loop through each row in the table
        var rows = document.getElementsByTagName('tr');
        for (var i = 1; i < rows.length; i++) {
            var title = rows[i].getElementsByTagName('td')[0].innerText.toLowerCase();
            var author = rows[i].getElementsByTagName('td')[1].innerText.toLowerCase();
            var isbn = rows[i].getElementsByTagName('td')[2].innerText.toLowerCase();
            var genre = rows[i].getElementsByTagName('td')[4].innerText.toLowerCase();

            // Check if the row should be displayed based on the combined filter
            if (title.includes(combinedFilter) || author.includes(combinedFilter) || isbn.includes(combinedFilter) || genre.includes(combinedFilter)) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }
    }

    // Funksioni per me shfaq filter modal (dialog)
    function showFilterDialog() {
        // Show the Bootstrap modal for filter options
        $('#filterModal').modal('show');

        // Populate the dropdowns inside the modal
        populateDropdown('genreDropdown', 'Genre');
        populateDropdown('authorDropdown', 'Author');
    }

    // Funksioni i cili thirret kur klikohet butoni "Apply Filters"
    function applyFilter() {
        var selectedGenre = document.getElementById('genreDropdown').value;
        var selectedAuthor = document.getElementById('authorDropdown').value;
        var minPrice = document.getElementById('minPrice').value;
        var maxPrice = document.getElementById('maxPrice').value;

        var rows = document.getElementsByTagName('tr');
        for (var i = 1; i < rows.length; i++) {
            var genre = rows[i].getElementsByTagName('td')[4].innerText.trim();
            var author = rows[i].getElementsByTagName('td')[1].innerText.trim();
            var price = parseFloat(rows[i].getElementsByTagName('td')[6].innerText.trim().replace(/[^0-9.]/g, ''));

            if (
                (selectedGenre === 'All Genres' || genre === selectedGenre) &&
                (selectedAuthor === 'All Authors' || author === selectedAuthor) &&
                (isNaN(minPrice) || (price >= parseFloat(minPrice) || minPrice === '')) &&
                (isNaN(maxPrice) || (price <= parseFloat(maxPrice) || maxPrice === ''))) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }

        $('#filterModal').modal('hide');
    }

    // Funksioni per me popullu dropdown listen per filtrim me author & genre
    function populateDropdown(dropdownId, columnName) {
        // Get unique values from the specified column in the book list
        const uniqueValues = new Set();
        var rows = document.getElementsByTagName('tr');
        for (var i = 1; i < rows.length; i++) {
            var value = rows[i].getElementsByTagName('td')[getColumnIndex(columnName)].innerText.trim();
            if (value !== '') {
                uniqueValues.add(value);
            }
        }

        // Populate the dropdown with unique values
        const dropdown = document.getElementById(dropdownId);
        dropdown.innerHTML = '';

        // Add an option for "All Genres" or "All Authors"
        const allOption = document.createElement('option');
        allOption.value = 'All ' + columnName + 's';
        allOption.text = 'All ' + columnName + 's';
        dropdown.add(allOption);

        // Add options for each unique value
        uniqueValues.forEach(value => {
            const option = document.createElement('option');
            option.value = value;
            option.text = value;
            dropdown.add(option);
        });
    }

    // Funksioni per me marr index-in e kolones te tabela Books
    function getColumnIndex(columnName) {
        // Map column names to their corresponding index
        const columnMap = {
            'Title': 0,
            'Author': 1,
            'ISBN': 2,
            'PublicationDate': 3,
            'Genre': 4,
            'Description': 5,
            'Price': 6,
            'CoverImage': 7
        };

        return columnMap[columnName];
    }

    // Funksioni per me ba cancel filter modal-in
    function cancelFilter() {
        // Hide the Bootstrap modal
        $('#filterModal').modal('hide');
    }

    // Funksioni per me u largu filterat pas klikimit te butonit "Clear Filters"
    function clearFilters() {
        // Set author and genre dropdowns to "All Authors" and "All Genres"
        document.getElementById('authorDropdown').value = 'All Authors';
        document.getElementById('genreDropdown').value = 'All Genres';

        // Reset the price range inputs
        document.getElementById('minPrice').value = '';
        document.getElementById('maxPrice').value = '';

        // Manually trigger the applyFilter function to update the display
        applyFilter();
    }

    // Funksioni per me i sortu librat sipas cmimit
    function sortBooksByPrice(sortDirection) {
        // Get all rows except the header
        const rows = Array.from(document.querySelectorAll('.table tbody tr'));

        // Sort the rows based on the price column
        const sortedRows = rows.sort((rowA, rowB) => {
            const priceA = parseFloat(rowA.children[6].innerText.trim().replace(/[^0-9.]/g, '')) || 0;
            const priceB = parseFloat(rowB.children[6].innerText.trim().replace(/[^0-9.]/g, '')) || 0;

            if (sortDirection === 'asc') {
                return priceA - priceB;
            } else {
                return priceB - priceA;
            }
        });

        // Remove all rows from the table
        const tbody = document.querySelector('.table tbody');
        tbody.innerHTML = '';

        // Append the sorted rows to the table
        sortedRows.forEach(row => {
            tbody.appendChild(row);
        });
    }

    // Funksioni per me i sortu librat sipas rendit alfabetik
    function sortBooksAlphabetically(sortDirection) {
        // Get all rows except the header
        const rows = Array.from(document.querySelectorAll('.table tbody tr'));

        // Sort the rows based on the title column
        const sortedRows = rows.sort((rowA, rowB) => {
            const titleA = rowA.children[0].innerText.trim().toLowerCase();
            const titleB = rowB.children[0].innerText.trim().toLowerCase();

            if (sortDirection === 'asc') {
                return titleA.localeCompare(titleB);
            } else {
                return titleB.localeCompare(titleA);
            }
        });

        // Remove all rows from the table
        const tbody = document.querySelector('.table tbody');
        tbody.innerHTML = '';

        // Append the sorted rows to the table
        sortedRows.forEach(row => {
            tbody.appendChild(row);
        });
    }

    // Funksioni per me i sortu librat sipas dates se publikimit
    function sortBooksByPublicationDate(sortDirection) {
        // Get all rows except the header
        const rows = Array.from(document.querySelectorAll('.table tbody tr'));

        // Sort the rows based on the publication date column
        const sortedRows = rows.sort((rowA, rowB) => {
            const dateA = parseDate(rowA.children[3].innerText.trim());
            const dateB = parseDate(rowB.children[3].innerText.trim());

            if (sortDirection === 'oldest') {
                return dateA - dateB;
            } else {
                return dateB - dateA;
            }
        });

        // Remove all rows from the table
        const tbody = document.querySelector('.table tbody');
        tbody.innerHTML = '';

        // Append the sorted rows to the table
        sortedRows.forEach(row => {
            tbody.appendChild(row);
        });
    }

    // Funksioni per me ndrru formatin e dates
    function parseDate(dateString) {
        // Parse the date in the "dd/mm/yyyy" format
        const parts = dateString.split('/');
        if (parts.length === 3) {
            const day = parseInt(parts[0], 10);
            const month = parseInt(parts[1], 10) - 1; // Months are zero-based in JavaScript
            const year = parseInt(parts[2], 10);

            return new Date(year, month, day);
        }

        // If the date cannot be parsed, return an invalid date
        return new Date('Invalid');
    }
</script>

<style>
    .wide-input {
        width: 300px;
    }

    .search-container {
        position: relative;
        display: inline-block;
    }

    .close {
        position: absolute;
        top: 0;
        right: 5px;
        padding: 5px;
        cursor: pointer;
        background-color: #32383E;
        border: #32383E;
        color: white;
    }

    #combinedFilter:focus {
        outline-color: #3A3F44;
        border-color: #3A3F44;
    }

    th:first-child {
        border-top-left-radius: 10px;
    }

    th:last-child {
        border-top-right-radius: 10px;
    }
</style>

<!-- Bootstrap JS and Popper.js -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>


@functions {
    string FormatISBNForDisplay(string isbn)
    {
        if (isbn == null || isbn.Length != 13)
        {
            return isbn; // Return as is if not a valid ISBN
        }

        return $"{isbn.Substring(0, 3)}-{isbn.Substring(3, 1)}-{isbn.Substring(4, 3)}-{isbn.Substring(7, 5)}-{isbn.Substring(12)}";
    }
}